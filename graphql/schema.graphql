type Query {
  """
  Get top searches for a given store.
  """
  topSearches: TopSearchesOutput @cacheControl(scope: PUBLIC, maxAge: SHORT)

  """
  Get suggestion searches for a given search term.
  """
  suggestionSearches(term: String!): SuggestionSearchesOutput
    @cacheControl(scope: PUBLIC, maxAge: SHORT)

  """
  Get suggestion products for a given search term.
  """
  suggestionProducts(
    term: String!
    attributeKey: String
    attributeValue: String
    indexingType: IndexingType
  ): SuggestionProductsOutput
    @cacheControl(scope: SEGMENT, maxAge: SHORT)
    @withSegment

  """
  Get attribute keys for a store.
  """
  attributeKeys: [AttributeResponseKey]!
    @cacheControl(scope: PUBLIC, maxAge: SHORT)

  """
  Get attribute values for a given attribute.
  """
  attributeValues(
    attribute: String!
    filters: [ResultRequestAttributeText]
  ): [AttributeResponseValue]! @cacheControl(scope: PUBLIC, maxAge: SHORT)

  searchResult(
    attributePath: String
    query: String
    page: Int
    count: Int
    sort: String
    operator: String
    fuzzy: Int
    leap: Boolean,
    indexingType: IndexingType = "API"
  ): ResultResponse @cacheControl(scope: SEGMENT, maxAge: SHORT) @withSegment
}

enum Origin {
  BIGGY
  VTEX
}

enum IndexingType {
  API
  XML
}

"""
Search response, contains prouct information and attributes.
"""
type ResultResponse {
  query: String
  operator: String
  total: Int
  products(origin: Origin = BIGGY, indexingType: IndexingType = API): [Product]
  pagination: ResultResponsePagination
  options: SearchOptions
  attributes: [AttributeResponseKey]
  suggestion: SuggestionSearchesOutput
  correction: PhraseSuggestion
  banners: [ElasticBanner]
  redirect: String
}

"""
Result of a SuggestionProducts query, a list of suggestion products.
"""
type SuggestionProductsOutput {
  operator: String
  misspelled: Boolean
  count: Int!
  products(origin: Origin = BIGGY, indexingType: IndexingType = "API"): [Product]!
}
